/******** First Install build dependencies fir bcc tools ********/

# For Focal (20.04.1 LTS)
sudo apt install -y zip bison build-essential cmake flex git libedit-dev \
  libllvm12 llvm-12-dev libclang-12-dev python zlib1g-dev libelf-dev libfl-dev python3-setuptools \
  liblzma-dev arping netperf iperf

# For Hirsute (21.04) or Impish (21.10)
sudo apt install -y zip bison build-essential cmake flex git libedit-dev \
  libllvm12 llvm-12-dev libclang-12-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools \
  liblzma-dev arping netperf iperf

# For Jammy (22.04)
sudo apt install -y zip bison build-essential cmake flex git libedit-dev \
  libllvm14 llvm-14-dev libclang-14-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools \
  liblzma-dev libdebuginfod-dev arping netperf iperf
  
# For Lunar Lobster (23.04)
sudo apt install -y zip bison build-essential cmake flex git libedit-dev \
  libllvm15 llvm-15-dev libclang-15-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools \
  liblzma-dev libdebuginfod-dev arping netperf iperf libpolly-15-dev

# For Mantic Minotaur (23.10)
sudo apt install -y zip bison build-essential cmake flex git libedit-dev \
  libllvm16 llvm-16-dev libclang-16-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools \
  liblzma-dev libdebuginfod-dev arping netperf iperf libpolly-16-dev

# For other versions
sudo apt-get -y install zip bison build-essential cmake flex git libedit-dev \
  libllvm3.7 llvm-3.7-dev libclang-3.7-dev python zlib1g-dev libelf-dev python3-setuptools \
  liblzma-dev arping netperf iperf

# For Lua support
sudo apt-get -y install luajit luajit-5.1-dev



/******** Install and compile BCC ********/

git clone https://github.com/iovisor/bcc.git
mkdir bcc/build; cd bcc/build
cmake ..
make
sudo make install
cmake -DPYTHON_CMD=python3 .. # build python3 binding
pushd src/python/
make
sudo make install
popd

/******** Compile and run the app.py ********/
sudo python3 app.py

**** By default mkdir syscall will be blocked only in the current mnt_namespace, If you want to **** block in any other mnt_namespace:-
******** Open app.py file
******** Look for these lines:- devinfo = os.stat("/proc/self/ns/mnt")
				restricted_ns = [devinfo.st_ino]
******** Change the list to the list of inodes of mnt_namespace files you want to block.

**** Now try using mkdir command on the other terminal tab, it will be blocked
**** NOTE:- My system uses mkdirat syscall when mkdir is called, if yours don't call this, it won't be blocked. But still mkdirat syscall will be blocked.

**** I have also made a checker.c program.
**** This program tries to create a directory "test_dir_curr_ns" in the current mnt_namespace
**** and "test_dir_new_ns" in a different mnt_namespace.
**** Prints the respective error message when it can't do so.
**** Compile and run using:-
gcc checker.c -o checker.o
sudo ./checker.o